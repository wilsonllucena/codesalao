// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          String        @id @default(uuid())
  name        String
  description String        @db.VarChar(500)
  price       Float?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  appointment Appointment[]

  @@map("services")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  description String?
  slug        String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("companies")
}

model Client {
  id          String        @id @default(uuid())
  name        String
  email       String
  phone       String
  age         String?
  address     String?
  city        String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  appointment Appointment[]

  @@unique([email, userId])
  @@map("clients")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  accounts      Account[]
  sessions      Session[]
  client        Client[]
  service       Service[]
  company       Company[]
  appointment   Appointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AppointmentStatus {
  pending
  confirmed
  canceled
}

model Appointment {
  id          String             @id @default(cuid())
  name        String?
  description String?            @db.VarChar(500)
  date        DateTime           @db.Timestamp
  hour        String
  status      AppointmentStatus? @default(pending)
  clientId    String?
  client      Client?            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId   String?
  service     Service?           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("appointments")
}
